{
	"info": {
		"_postman_id": "atom-ocr-ai-2025",
		"name": "Atom OCR AI - API Collection 2025 (Renovada)",
		"description": "Colección completa renovada para la API de Atom OCR AI con todos los endpoints disponibles, debugging avanzado y manejo robusto de tokens JWT",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "atom-ocr-ai",
		"version": {
			"major": 2,
			"minor": 1,
			"patch": 0
		}
	},
	"item": [
		{
			"name": "🔐 Autenticación",
			"description": "Endpoints para autenticación y gestión de tokens JWT",
			"item": [
				{
					"name": "Login",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log('🚀 === INICIANDO LOGIN === 🚀');",
									"console.log('Timestamp:', new Date().toISOString());",
									"console.log('Limpiando tokens anteriores...');",
									"pm.environment.unset('access_token');",
									"pm.environment.unset('refresh_token');",
									"pm.environment.unset('token_expires_at');",
									"console.log('✅ Tokens anteriores limpiados.');"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log('📊 === RESPUESTA LOGIN === 📊');",
									"console.log('Status Code:', pm.response.code);",
									"console.log('Response Time:', pm.response.responseTime + 'ms');",
									"",
									"if (pm.response.code === 200) {",
									"    console.log('🎉 LOGIN EXITOSO 🎉');",
									"    let response = pm.response.json();",
									"    pm.environment.set('access_token', response.access_token);",
									"    pm.environment.set('refresh_token', response.refresh_token);",
									"    const expiresAt = new Date(Date.now() + (response.expires_in * 1000));",
									"    pm.environment.set('token_expires_at', expiresAt.toISOString());",
									"    console.log('✅ Tokens guardados correctamente');",
									"    pm.test('✅ Login successful', () => pm.response.to.have.status(200));",
									"} else {",
									"    console.log('❌ LOGIN FALLÓ - Status:', pm.response.code);",
									"    pm.test('❌ Login failed', () => pm.expect.fail('Login failed'));",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"{{username}}\",\n    \"password\": \"{{password}}\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/login",
							"host": ["{{base_url}}"],
							"path": ["login"]
						}
					},
					"response": []
				},
				{
					"name": "User Info",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log('👤 === PRE-REQUEST USER INFO === 👤');",
									"const token = pm.environment.get('access_token');",
									"console.log('🔧 Access Token disponible:', token ? 'SÍ' : 'NO');",
									"if (!token) console.log('🚨 WARNING: No access token found!');"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log('📊 === RESPUESTA USER INFO === 📊');",
									"console.log('Status Code:', pm.response.code);",
									"",
									"if (pm.response.code === 200) {",
									"    console.log('🎉 USER INFO OBTENIDA EXITOSAMENTE 🎉');",
									"    let response = pm.response.json();",
									"    pm.environment.set('current_user_id', response.id);",
									"    pm.environment.set('current_user_role', response.role);",
									"    console.log('👤 Usuario:', response.username, '- Rol:', response.role);",
									"    pm.test('✅ User info retrieved', () => pm.response.to.have.status(200));",
									"} else {",
									"    console.log('❌ ERROR - Status:', pm.response.code);",
									"    if (pm.response.code === 401) console.log('💡 SUGERENCIA: Ejecuta Login primero');",
									"    pm.test('❌ User info failed', () => pm.expect.fail('Request failed'));",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/userinfo",
							"host": ["{{base_url}}"],
							"path": ["userinfo"]
						}
					},
					"response": []
				},
				{
					"name": "Refresh Token",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log('🔄 === PRE-REQUEST REFRESH TOKEN === 🔄');",
									"const refreshToken = pm.environment.get('refresh_token');",
									"console.log('🔧 Refresh Token disponible:', refreshToken ? 'SÍ' : 'NO');",
									"if (!refreshToken) console.log('🚨 WARNING: No refresh token found!');"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log('📊 === RESPUESTA REFRESH TOKEN === 📊');",
									"console.log('Status Code:', pm.response.code);",
									"",
									"if (pm.response.code === 200) {",
									"    console.log('🎉 TOKEN REFRESH EXITOSO 🎉');",
									"    let response = pm.response.json();",
									"    pm.environment.set('access_token', response.access_token);",
									"    const expiresAt = new Date(Date.now() + (response.expires_in * 1000));",
									"    pm.environment.set('token_expires_at', expiresAt.toISOString());",
									"    console.log('✅ Nuevo token guardado');",
									"    pm.test('✅ Token refresh successful', () => pm.response.to.have.status(200));",
									"} else {",
									"    console.log('❌ TOKEN REFRESH FALLÓ - Status:', pm.response.code);",
									"    pm.test('❌ Token refresh failed', () => pm.expect.fail('Refresh failed'));",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"refresh_token\": \"{{refresh_token}}\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/refresh",
							"host": ["{{base_url}}"],
							"path": ["refresh"]
						}
					},
					"response": []
				},
				{
					"name": "Register User (Admin Only)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log('👥 === PRE-REQUEST REGISTER USER === 👥');",
									"const token = pm.environment.get('access_token');",
									"const userRole = pm.environment.get('current_user_role');",
									"console.log('🔧 Token disponible:', token ? 'SÍ' : 'NO');",
									"console.log('🔧 Rol actual:', userRole || 'NO DETERMINADO');",
									"if (userRole !== 'admin') console.log('⚠️ WARNING: Se requieren privilegios de admin');"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log('📊 === RESPUESTA REGISTER USER === 📊');",
									"console.log('Status Code:', pm.response.code);",
									"",
									"if (pm.response.code === 201) {",
									"    console.log('🎉 USUARIO REGISTRADO EXITOSAMENTE 🎉');",
									"    let response = pm.response.json();",
									"    console.log('👤 Usuario creado:', response.username);",
									"    pm.test('✅ User registered successfully', () => pm.response.to.have.status(201));",
									"} else {",
									"    console.log('❌ REGISTRO FALLÓ - Status:', pm.response.code);",
									"    if (pm.response.code === 403) console.log('🚫 Acceso denegado - Se requieren privilegios de admin');",
									"    pm.test('❌ Registration failed', () => pm.expect.fail('Registration failed'));",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"nuevo_usuario\",\n    \"email\": \"nuevo@ejemplo.com\",\n    \"password\": \"password123\",\n    \"role\": \"user\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/register",
							"host": ["{{base_url}}"],
							"path": ["register"]
						}
					},
					"response": []
				},
				{
					"name": "Logout",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log('📊 === RESPUESTA LOGOUT === 📊');",
									"console.log('Status Code:', pm.response.code);",
									"",
									"if (pm.response.code === 200) {",
									"    console.log('🎉 LOGOUT EXITOSO 🎉');",
									"    console.log('🧹 Limpiando tokens del entorno...');",
									"    pm.environment.unset('access_token');",
									"    pm.environment.unset('refresh_token');",
									"    pm.environment.unset('token_expires_at');",
									"    pm.environment.unset('current_user_id');",
									"    pm.environment.unset('current_user_role');",
									"    console.log('✅ Tokens limpiados correctamente');",
									"    pm.test('✅ Logout successful', () => pm.response.to.have.status(200));",
									"} else {",
									"    console.log('❌ LOGOUT FALLÓ - Status:', pm.response.code);",
									"    pm.test('❌ Logout failed', () => pm.expect.fail('Logout failed'));",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/logout",
							"host": ["{{base_url}}"],
							"path": ["logout"]
						}
					},
					"response": []
				},
				{
					"name": "Regenerate Client Secret",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log('🔄 === RESPUESTA REGENERATE CLIENT SECRET === 🔄');",
									"console.log('Status Code:', pm.response.code);",
									"",
									"if (pm.response.code === 200) {",
									"    console.log('🎉 CLIENT SECRET REGENERADO EXITOSAMENTE 🎉');",
									"    let response = pm.response.json();",
									"    // Validar que se devuelva el nuevo client_secret",
									"    pm.test('✅ Client secret regenerated successfully', () => pm.response.to.have.status(200));",
									"    pm.test('✅ Response contains new client_secret', () => {",
									"        pm.expect(response).to.have.property('client_secret');",
									"        pm.expect(response.client_secret).to.be.a('string');",
									"        pm.expect(response.client_secret).to.have.lengthOf(64);",
									"        // Verificar que el nuevo secret es diferente al anterior",
									"        const oldSecret = pm.environment.get('last_client_secret');",
									"        if (oldSecret) {",
									"            pm.expect(response.client_secret).to.not.equal(oldSecret);",
									"            console.log('🔐 Nuevo client_secret es diferente al anterior');",
									"        }",
									"        // Actualizar el client_secret guardado",
									"        pm.environment.set('last_client_secret', response.client_secret);",
									"        console.log('🔐 Nuevo Client Secret guardado para pruebas');",
									"    });",
									"    pm.test('✅ Response contains updated_at field', () => {",
									"        pm.expect(response).to.have.property('updated_at');",
									"        console.log('📅 Fecha de actualización:', response.updated_at);",
									"    });",
									"} else {",
									"    console.log('❌ REGENERACIÓN DE CLIENT SECRET FALLÓ - Status:', pm.response.code);",
									"    pm.test('❌ Client secret regeneration failed', () => pm.expect.fail('Client secret regeneration failed'));",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/clients/{{last_created_client_id}}/regenerate-secret",
							"host": ["{{base_url}}"],
							"path": ["clients", "{{last_created_client_id}}", "regenerate-secret"]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "👥 Gestión de Clientes",
			"description": "Endpoints para gestionar clientes y aplicaciones",
			"item": [
				{
					"name": "Create Client",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log('📊 === RESPUESTA CREATE CLIENT === 📊');",
									"console.log('Status Code:', pm.response.code);",
									"",
									"if (pm.response.code === 201) {",
									"    console.log('🎉 CLIENTE CREADO EXITOSAMENTE 🎉');",
									"    let response = pm.response.json();",
									"    if (response.id) {",
									"        pm.environment.set('last_created_client_id', response.id);",
									"        console.log('💾 Client ID guardado:', response.id);",
									"    }",
									"    // Validar que se devuelvan las credenciales",
									"    pm.test('✅ Client created successfully', () => pm.response.to.have.status(201));",
									"    pm.test('✅ Response contains client_id', () => {",
									"        pm.expect(response).to.have.property('client_id');",
									"        pm.expect(response.client_id).to.be.a('string');",
									"        pm.expect(response.client_id).to.have.lengthOf(32);",
									"    });",
									"    pm.test('✅ Response contains client_secret', () => {",
									"        pm.expect(response).to.have.property('client_secret');",
									"        pm.expect(response.client_secret).to.be.a('string');",
									"        pm.expect(response.client_secret).to.have.lengthOf(64);",
									"        // Guardar client_secret para pruebas posteriores",
									"        pm.environment.set('last_client_secret', response.client_secret);",
									"        console.log('🔐 Client Secret guardado para pruebas');",
									"    });",
									"    pm.test('✅ Response contains required fields', () => {",
									"        pm.expect(response).to.have.property('name');",
									"        pm.expect(response).to.have.property('is_active');",
									"        pm.expect(response).to.have.property('user_id');",
									"        pm.expect(response).to.have.property('created_at');",
									"    });",
									"} else {",
									"    console.log('❌ CREACIÓN DE CLIENTE FALLÓ - Status:', pm.response.code);",
									"    pm.test('❌ Client creation failed', () => pm.expect.fail('Client creation failed'));",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Mi Aplicación OCR\",\n    \"description\": \"Aplicación para procesamiento de documentos\",\n    \"redirect_uris\": [\"http://localhost:3000/callback\"],\n    \"allowed_origins\": [\"http://localhost:3000\"]\n}"
						},
						"url": {
							"raw": "{{base_url}}/clients",
							"host": ["{{base_url}}"],
							"path": ["clients"]
						}
					},
					"response": []
				},
				{
					"name": "List Clients",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log('📊 === RESPUESTA LIST CLIENTS === 📊');",
									"console.log('Status Code:', pm.response.code);",
									"",
									"if (pm.response.code === 200) {",
									"    console.log('✅ LISTA DE CLIENTES OBTENIDA');",
									"    let response = pm.response.json();",
									"    console.log('📋 Total de clientes:', response.length || 0);",
									"    pm.test('✅ Clients list retrieved', () => pm.response.to.have.status(200));",
									"} else {",
									"    console.log('❌ ERROR AL OBTENER CLIENTES - Status:', pm.response.code);",
									"    pm.test('❌ Clients list failed', () => pm.expect.fail('Failed to get clients'));",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/clients",
							"host": ["{{base_url}}"],
							"path": ["clients"]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "📸 Gestión de Imágenes",
			"description": "Endpoints para carga, procesamiento y gestión de imágenes",
			"item": [
				{
					"name": "Upload Image",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log('📸 === PRE-REQUEST UPLOAD IMAGE === 📸');",
									"const token = pm.environment.get('access_token');",
									"console.log('🔧 Access Token disponible:', token ? 'SÍ' : 'NO');",
									"if (!token) console.log('🚨 WARNING: No access token found!');"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log('📊 === RESPUESTA UPLOAD IMAGE === 📊');",
									"console.log('Status Code:', pm.response.code);",
									"",
									"if (pm.response.code === 201) {",
									"    console.log('🎉 IMAGEN CARGADA EXITOSAMENTE 🎉');",
									"    let response = pm.response.json();",
									"    if (response.id) {",
									"        pm.environment.set('last_uploaded_image_id', response.id);",
									"        console.log('💾 Image ID guardado:', response.id);",
									"    }",
									"    console.log('📸 Archivo:', response.filename);",
									"    console.log('📏 Tamaño:', response.file_size, 'bytes');",
									"    pm.test('✅ Image uploaded successfully', () => pm.response.to.have.status(201));",
									"} else {",
									"    console.log('❌ CARGA DE IMAGEN FALLÓ - Status:', pm.response.code);",
									"    pm.test('❌ Image upload failed', () => pm.expect.fail('Image upload failed'));",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "",
									"description": "Archivo de imagen a cargar"
								},
								{
									"key": "credential_side",
									"value": "{{test_document_side}}",
									"type": "text",
									"description": "Lado del documento (front/back)"
								},
								{
									"key": "document_type",
									"value": "{{test_document_type}}",
									"type": "text",
									"description": "Tipo de documento (cedula, pasaporte, licencia)"
								},
								{
									"key": "client_id",
									"value": "{{last_created_client_id}}",
									"type": "text",
									"description": "ID del cliente (opcional)"
								}
							]
						},
						"url": {
							"raw": "{{base_url}}/upload-image",
							"host": ["{{base_url}}"],
							"path": ["upload-image"]
						}
					},
					"response": []
				},
				{
					"name": "List Images",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log('📊 === RESPUESTA LIST IMAGES === 📊');",
									"console.log('Status Code:', pm.response.code);",
									"",
									"if (pm.response.code === 200) {",
									"    console.log('✅ LISTA DE IMÁGENES OBTENIDA');",
									"    let response = pm.response.json();",
									"    console.log('📋 Total de imágenes:', response.length || 0);",
									"    if (response.length > 0) {",
									"        console.log('📸 Primera imagen:', response[0].filename);",
									"    }",
									"    pm.test('✅ Images list retrieved', () => pm.response.to.have.status(200));",
									"} else {",
									"    console.log('❌ ERROR AL OBTENER IMÁGENES - Status:', pm.response.code);",
									"    pm.test('❌ Images list failed', () => pm.expect.fail('Failed to get images'));",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/images?skip=0&limit={{images_pagination_limit}}",
							"host": ["{{base_url}}"],
							"path": ["images"],
							"query": [
								{
									"key": "skip",
									"value": "0",
									"description": "Número de registros a omitir"
								},
								{
									"key": "limit",
									"value": "{{images_pagination_limit}}",
									"description": "Número máximo de registros a devolver"
								},
								{
									"key": "client_id",
									"value": "",
									"description": "Filtrar por ID del cliente",
									"disabled": true
								},
								{
									"key": "document_type",
									"value": "",
									"description": "Filtrar por tipo de documento",
									"disabled": true
								},
								{
									"key": "side",
									"value": "",
									"description": "Filtrar por lado (front/back)",
									"disabled": true
								},
								{
									"key": "is_processed",
									"value": "",
									"description": "Filtrar por estado de procesamiento",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Process Image",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log('📊 === RESPUESTA PROCESS IMAGE === 📊');",
									"console.log('Status Code:', pm.response.code);",
									"",
									"if (pm.response.code === 200) {",
									"    console.log('✅ IMAGEN MARCADA COMO PROCESADA');",
									"    let response = pm.response.json();",
									"    console.log('📸 Imagen:', response.filename);",
									"    console.log('✅ Estado procesado:', response.is_processed);",
									"    pm.test('✅ Image processed successfully', () => pm.response.to.have.status(200));",
									"} else {",
									"    console.log('❌ ERROR AL PROCESAR IMAGEN - Status:', pm.response.code);",
									"    pm.test('❌ Image processing failed', () => pm.expect.fail('Failed to process image'));",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/images/{{last_uploaded_image_id}}/process",
							"host": ["{{base_url}}"],
							"path": ["images", "{{last_uploaded_image_id}}", "process"]
						}
					},
					"response": []
				},
				{
					"name": "Reject Image",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log('📊 === RESPUESTA REJECT IMAGE === 📊');",
									"console.log('Status Code:', pm.response.code);",
									"",
									"if (pm.response.code === 200) {",
									"    console.log('✅ IMAGEN MARCADA COMO RECHAZADA');",
									"    let response = pm.response.json();",
									"    console.log('📸 Imagen:', response.filename);",
									"    console.log('❌ Estado rechazado:', response.is_rejected);",
									"    pm.test('✅ Image rejected successfully', () => pm.response.to.have.status(200));",
									"} else {",
									"    console.log('❌ ERROR AL RECHAZAR IMAGEN - Status:', pm.response.code);",
									"    pm.test('❌ Image rejection failed', () => pm.expect.fail('Failed to reject image'));",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/images/{{last_uploaded_image_id}}/reject",
							"host": ["{{base_url}}"],
							"path": ["images", "{{last_uploaded_image_id}}", "reject"]
						}
					},
					"response": []
				},
				{
					"name": "Delete Image",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log('📊 === RESPUESTA DELETE IMAGE === 📊');",
									"console.log('Status Code:', pm.response.code);",
									"",
									"if (pm.response.code === 200) {",
									"    console.log('✅ IMAGEN ELIMINADA (SOFT DELETE)');",
									"    let response = pm.response.json();",
									"    console.log('📸 Imagen:', response.filename);",
									"    console.log('🗑️ Eliminada:', response.is_deleted);",
									"    pm.test('✅ Image deleted successfully', () => pm.response.to.have.status(200));",
									"} else {",
									"    console.log('❌ ERROR AL ELIMINAR IMAGEN - Status:', pm.response.code);",
									"    pm.test('❌ Image deletion failed', () => pm.expect.fail('Failed to delete image'));",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/images/{{last_uploaded_image_id}}",
							"host": ["{{base_url}}"],
							"path": ["images", "{{last_uploaded_image_id}}"]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "🔧 Sistema",
			"description": "Endpoints para información del sistema y salud",
			"item": [
				{
					"name": "Health Check",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log('🏥 === RESPUESTA HEALTH CHECK === 🏥');",
									"console.log('Status Code:', pm.response.code);",
									"console.log('Response Time:', pm.response.responseTime + 'ms');",
									"",
									"if (pm.response.code === 200) {",
									"    console.log('✅ SISTEMA SALUDABLE');",
									"    try {",
									"        let response = pm.response.json();",
									"        console.log('🏥 Estado del sistema:', JSON.stringify(response, null, 2));",
									"    } catch (e) {",
									"        console.log('Response text:', pm.response.text());",
									"    }",
									"    pm.test('✅ System is healthy', () => pm.response.to.have.status(200));",
									"} else {",
									"    console.log('🚨 SISTEMA CON PROBLEMAS - Status:', pm.response.code);",
									"    pm.test('❌ System health check failed', () => pm.expect.fail('Health check failed'));",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8000/health",
							"host": ["http://localhost:8000"],
							"path": ["health"]
						}
					},
					"response": []
				},
				{
					"name": "System Info",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log('📋 === RESPUESTA SYSTEM VERSION === 📋');",
									"console.log('Status Code:', pm.response.code);",
									"",
									"if (pm.response.code === 200) {",
									"    console.log('✅ INFORMACIÓN DEL SISTEMA OBTENIDA');",
									"    try {",
									"        let response = pm.response.json();",
									"        console.log('📋 Mensaje:', response.message || 'No disponible');",
									"        console.log('📋 Versión:', response.version || 'No disponible');",
									"    } catch (e) {",
									"        console.log('Response text:', pm.response.text());",
									"    }",
									"    pm.test('✅ System info retrieved', () => pm.response.to.have.status(200));",
									"} else {",
									"    console.log('❌ ERROR AL OBTENER INFORMACIÓN - Status:', pm.response.code);",
									"    pm.test('❌ System info failed', () => pm.expect.fail('Info check failed'));",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8000/",
							"host": ["http://localhost:8000"],
							"path": [""]
						}
					},
					"response": []
				}
			]
		}
	]
}