{
	"info": {
		"_postman_id": "a1b2c3d4-e5f6-7890-abcd-ef1234567890",
		"name": "Atom OCR AI - API Collection",
		"description": "Colección de endpoints para la API de Atom OCR AI con sistema de autenticación JWT",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "12345678"
	},
	"item": [
		{
			"name": "Autenticación",
			"item": [
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Login successful', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    ",
									"    // Guardar tokens en variables de entorno",
									"    pm.environment.set('access_token', response.access_token);",
									"    pm.environment.set('refresh_token', response.refresh_token);",
									"    ",
									"    // Log para debugging",
									"    console.log('Access Token:', response.access_token);",
									"    console.log('Refresh Token:', response.refresh_token);",
									"    console.log('Tokens guardados exitosamente en variables de entorno');",
									"    ",
									"    // Verificar que los tokens se guardaron",
									"    pm.test('Access token saved', function () {",
									"        pm.expect(pm.environment.get('access_token')).to.not.be.empty;",
									"    });",
									"    ",
									"    pm.test('Refresh token saved', function () {",
									"        pm.expect(pm.environment.get('refresh_token')).to.not.be.empty;",
									"    });",
									"} else {",
									"    console.log('Login failed with status:', pm.response.code);",
									"    console.log('Response:', pm.response.text());",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"body": {
						"mode": "raw",
						"raw": "{\n    \"username\": \"admin\",\n    \"password\": \"admin123\"\n}"
					},
						"url": {
							"raw": "{{base_url}}/api/v1/login",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"login"
							]
						},
						"description": "Endpoint para autenticar usuario y obtener tokens JWT"
					},
					"response": []
				},
				{
					"name": "Refresh Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    pm.environment.set('access_token', response.access_token);",
									"    console.log('Access token renovado exitosamente');",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"refresh_token\": \"{{refresh_token}}\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v1/refresh",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"refresh"
							]
						},
						"description": "Endpoint para renovar el access token usando el refresh token"
					},
					"response": []
				},
				{
					"name": "User Info",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Debug: Verificar token antes de la solicitud",
									"const token = pm.environment.get('access_token');",
									"console.log('Token being used:', token ? token.substring(0, 50) + '...' : 'NO TOKEN');",
									"if (!token) {",
									"    console.log('WARNING: No access token found. Please login first.');",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 401) {",
									"    console.log('401 Unauthorized - Token may be invalid or expired');",
									"    console.log('Response:', pm.response.text());",
									"} else if (pm.response.code === 200) {",
									"    console.log('User info retrieved successfully');",
									"    pm.test('User info retrieved', function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/v1/userinfo",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"userinfo"
							]
						},
						"description": "Endpoint para obtener información del usuario autenticado"
					},
					"response": []
				},
				{
					"name": "Logout",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/v1/logout",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"logout"
							]
						},
						"description": "Endpoint para cerrar sesión e invalidar tokens"
					},
					"response": []
				},
				{
					"name": "Verify Token",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Debug: Verificar token antes de la solicitud",
									"const token = pm.environment.get('access_token');",
									"console.log('Token being used:', token ? token.substring(0, 50) + '...' : 'NO TOKEN');",
									"if (!token) {",
									"    console.log('WARNING: No access token found. Please login first.');",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 401) {",
									"    console.log('401 Unauthorized - Token may be invalid or expired');",
									"    console.log('Response:', pm.response.text());",
									"} else if (pm.response.code === 200) {",
									"    console.log('Token verification successful');",
									"    pm.test('Token is valid', function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/v1/verify-token",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"verify-token"
							]
						},
						"description": "Endpoint para verificar si el token de acceso es válido"
					},
					"response": []
				}
			]
		},
		{
			"name": "Sistema",
			"item": [
				{
					"name": "Health Check",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/health",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"health"
							]
						},
						"description": "Endpoint para verificar el estado de la API"
					},
					"response": []
				},
				{
					"name": "Root",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								""
							]
						},
						"description": "Endpoint raíz de la API"
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "http://localhost:8000",
			"type": "string"
		}
	]
}